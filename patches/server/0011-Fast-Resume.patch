From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: GideonWhite1029 <gideonwhite1029@gmail.com>
Date: Thu, 28 Mar 2024 14:45:24 +0400
Subject: [PATCH] Fast Resume

Powered by Leaves: https://github.com/LeavesMC/Leaves

diff --git a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkHolderManager.java b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkHolderManager.java
index 58d3d1a47e9f2423c467bb329c2d5f4b58a8b5ef..2eec5c65162ad4a14bf6e6b49115f1fffd4b573d 100644
--- a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkHolderManager.java
+++ b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkHolderManager.java
@@ -582,6 +582,49 @@ public final class ChunkHolderManager {
         }
     }
 
+    // Horizon start - add custom ticket
+    public <T> void addTicketAtLevelCustom(final Ticket<T> ticket, final long chunk, final boolean lock) {
+        final long removeDelay = ticket.moonrise$getRemoveDelay();
+
+        final int chunkX = CoordinateUtils.getChunkX(chunk);
+        final int chunkZ = CoordinateUtils.getChunkZ(chunk);
+
+        final ReentrantAreaLock.Node ticketLock = lock ? this.ticketLockArea.lock(chunkX, chunkZ) : null;
+        try {
+            final SortedArraySet<Ticket<?>> ticketsAtChunk = this.tickets.computeIfAbsent(chunk, (final long keyInMap) -> SortedArraySet.create(4));
+
+            final int levelBefore = getTicketLevelAt(ticketsAtChunk);
+            final Ticket<T> current = (Ticket<T>) ((ChunkSystemSortedArraySet<Ticket<?>>) ticketsAtChunk).moonrise$replace(ticket);
+            final int levelAfter = getTicketLevelAt(ticketsAtChunk);
+
+            if (current != ticket) {
+                final long oldRemoveDelay = ((ChunkSystemTicket<T>) current).moonrise$getRemoveDelay();
+                if (removeDelay != oldRemoveDelay) {
+                    if (oldRemoveDelay != NO_TIMEOUT_MARKER && removeDelay == NO_TIMEOUT_MARKER) {
+                        this.removeExpireCount(chunkX, chunkZ);
+                    } else if (oldRemoveDelay == NO_TIMEOUT_MARKER) {
+                        // since old != new, we have that NO_TIMEOUT_MARKER != new
+                        this.addExpireCount(chunkX, chunkZ);
+                    }
+                }
+            } else {
+                if (removeDelay != NO_TIMEOUT_MARKER) {
+                    this.addExpireCount(chunkX, chunkZ);
+                }
+            }
+
+            if (levelBefore != levelAfter) {
+                this.updateTicketLevel(chunk, levelAfter);
+            }
+
+        } finally {
+            if (ticketLock != null) {
+                this.ticketLockArea.unlock(ticketLock);
+            }
+        }
+    }
+    // Horizon end - add custom ticket
+
     public <T> boolean removeTicketAtLevel(final TicketType<T> type, final ChunkPos chunkPos, final int level, final T identifier) {
         return this.removeTicketAtLevel(type, CoordinateUtils.getChunkKey(chunkPos), level, identifier);
     }
diff --git a/src/main/java/dev/horizonmc/horizon/HorizonConfig.java b/src/main/java/dev/horizonmc/horizon/HorizonConfig.java
index 07d91160b1d3a01ba63255481eb27bb2113f798d..e172ca0dcefa6df737bcd37e855076a07374ca30 100644
--- a/src/main/java/dev/horizonmc/horizon/HorizonConfig.java
+++ b/src/main/java/dev/horizonmc/horizon/HorizonConfig.java
@@ -91,4 +91,7 @@ public final class HorizonConfig {
     @GlobalConfig(name = "spectator-dont-get-advancement", category = {"features"})
     public static boolean spectatorDontGetAdvancement = false;
 
+    @GlobalConfig(name = "fast-resume", category = {"features"})
+    public static boolean fastResume = true;
+
 }
\ No newline at end of file
diff --git a/src/main/java/dev/horizonmc/horizon/HorizonLogger.java b/src/main/java/dev/horizonmc/horizon/HorizonLogger.java
index c3d002305a973c59a2649c5736706dfec978eca2..2a19bcba37587e232cae47c415070c7eed14a801 100644
--- a/src/main/java/dev/horizonmc/horizon/HorizonLogger.java
+++ b/src/main/java/dev/horizonmc/horizon/HorizonLogger.java
@@ -2,6 +2,7 @@ package dev.horizonmc.horizon;
 
 import org.bukkit.Bukkit;
 
+import java.io.IOException;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
diff --git a/src/main/java/dev/horizonmc/horizon/util/TicketHelper.java b/src/main/java/dev/horizonmc/horizon/util/TicketHelper.java
new file mode 100644
index 0000000000000000000000000000000000000000..2e5ef6ed8ae20ba75df7fac972dabb29ef19485d
--- /dev/null
+++ b/src/main/java/dev/horizonmc/horizon/util/TicketHelper.java
@@ -0,0 +1,175 @@
+package dev.horizonmc.horizon.util;
+
+import ca.spottedleaf.moonrise.patches.chunk_system.player.RegionizedPlayerChunkLoader;
+import com.google.gson.Gson;
+import com.google.gson.JsonArray;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import dev.horizonmc.horizon.HorizonConfig;
+import dev.horizonmc.horizon.HorizonLogger;
+import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.registries.Registries;
+import net.minecraft.resources.ResourceKey;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.DistanceManager;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.Ticket;
+import net.minecraft.server.level.TicketType;
+import net.minecraft.util.SortedArraySet;
+import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.storage.LevelResource;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
+import java.util.Set;
+
+public class TicketHelper {
+
+    private static final Set<TicketType<?>> NEED_SAVED = Set.of(TicketType.PLAYER, TicketType.PORTAL, RegionizedPlayerChunkLoader.PLAYER_TICKET);
+
+    public static void tryToLoadTickets() {
+        if (!HorizonConfig.fastResume) {
+            return;
+        }
+
+        File file = MinecraftServer.getServer().getWorldPath(LevelResource.ROOT).resolve("chunk_tickets.horizon.json").toFile();
+        if (file.isFile()) {
+            try (BufferedReader bfr = Files.newBufferedReader(file.toPath(), StandardCharsets.UTF_8)) {
+                JsonObject json = new Gson().fromJson(bfr, JsonObject.class);
+                loadSavedChunkTickets(json);
+                if (!file.delete()) {
+                    throw new IOException();
+                }
+            } catch (IOException e) {
+                HorizonLogger.LOGGER.severe("Failed to load saved chunk tickets file", e);
+            }
+        }
+    }
+
+    public static void tryToSaveTickets() {
+        if (!HorizonConfig.fastResume) {
+            return;
+        }
+
+        File file = MinecraftServer.getServer().getWorldPath(LevelResource.ROOT).resolve("chunk_tickets.horizon.json").toFile();
+        try (BufferedWriter bfw = Files.newBufferedWriter(file.toPath(), StandardCharsets.UTF_8)) {
+            bfw.write(new Gson().toJson(getSavedChunkTickets()));
+        } catch (IOException e) {
+            HorizonLogger.LOGGER.severe("Failed to save chunk tickets file", e);
+        }
+    }
+
+    public static void loadSavedChunkTickets(JsonObject json) {
+        MinecraftServer server = MinecraftServer.getServer();
+        for (String worldKey : json.keySet()) {
+            ResourceLocation dimensionKey = ResourceLocation.tryParse(worldKey);
+            if (dimensionKey == null) {
+                continue;
+            }
+
+            ServerLevel level = server.getLevel(ResourceKey.create(Registries.DIMENSION, dimensionKey));
+            if (level == null) {
+                continue;
+            }
+
+            DistanceManager chunkDistanceManager = level.getChunkSource().chunkMap.distanceManager;
+            for (JsonElement chunkElement : json.get(worldKey).getAsJsonArray()) {
+                JsonObject chunkJson = (JsonObject) chunkElement;
+                long chunkKey = chunkJson.get("key").getAsLong();
+
+                for (JsonElement ticketElement : chunkJson.get("tickets").getAsJsonArray()) {
+                    Ticket<?> ticket = tickFormJson((JsonObject) ticketElement);
+                    chunkDistanceManager.getChunkHolderManager().addTicketAtLevelCustom(ticket, chunkKey, true);
+                }
+            }
+        }
+    }
+
+    public static JsonObject getSavedChunkTickets() {
+        JsonObject json = new JsonObject();
+
+        for (ServerLevel level : MinecraftServer.getServer().getAllLevels()) {
+            JsonArray levelArray = new JsonArray();
+            DistanceManager chunkDistanceManager = level.getChunkSource().chunkMap.distanceManager;
+
+            for (Long2ObjectMap.Entry<SortedArraySet<Ticket<?>>> chunkTickets : chunkDistanceManager.getChunkHolderManager().getTicketsCopy().long2ObjectEntrySet()) {
+                long chunkKey = chunkTickets.getLongKey();
+                JsonArray ticketArray = new JsonArray();
+                SortedArraySet<Ticket<?>> tickets = chunkTickets.getValue();
+
+                for (Ticket<?> ticket : tickets) {
+                    if (!NEED_SAVED.contains(ticket.getType())) {
+                        continue;
+                    }
+
+                    ticketArray.add(ticketToJson(ticket));
+                }
+
+                if (!ticketArray.isEmpty()) {
+                    JsonObject chunkJson = new JsonObject();
+                    chunkJson.addProperty("key", chunkKey);
+                    chunkJson.add("tickets", ticketArray);
+                    levelArray.add(chunkJson);
+                }
+            }
+
+            if (!levelArray.isEmpty()) {
+                json.add(level.dimension().location().toString(), levelArray);
+            }
+        }
+
+        return json;
+    }
+
+    private static JsonObject ticketToJson(Ticket<?> ticket) {
+        JsonObject json = new JsonObject();
+        json.addProperty("type", ticket.getType().toString());
+        json.addProperty("ticketLevel", ticket.getTicketLevel());
+        json.addProperty("removeDelay", ticket.moonrise$getRemoveDelay());
+        if (ticket.key instanceof BlockPos pos) {
+            json.addProperty("key", pos.asLong());
+        } else if (ticket.key instanceof ChunkPos pos) {
+            json.addProperty("key", pos.toLong());
+        } else if (ticket.key instanceof Long l) {
+            json.addProperty("key", l);
+        }
+        return json;
+    }
+
+    private static <T> Ticket<T> tickFormJson(JsonObject json) {
+        TicketType<?> ticketType = null;
+        Object key = null;
+        switch (json.get("type").getAsString()) {
+            case "player" -> {
+                ticketType = TicketType.PLAYER;
+                key = new ChunkPos(json.get("key").getAsLong());
+            }
+            case "portal" -> {
+                ticketType = TicketType.PORTAL;
+                key = BlockPos.of(json.get("key").getAsLong());
+            }
+            case "chunk_system:player_ticket" -> {
+                ticketType = RegionizedPlayerChunkLoader.PLAYER_TICKET;
+                key = json.get("key").getAsLong();
+            }
+        }
+
+        if (ticketType == null) {
+            throw new IllegalArgumentException("Cant convert " + json.get("type").getAsString() + ", report it ???");
+        }
+
+        int ticketLevel = json.get("ticketLevel").getAsInt();
+        long removeDelay = json.get("removeDelay").getAsLong();
+        @SuppressWarnings("unchecked")
+        Ticket<T> ticket = new Ticket<>((TicketType<T>) ticketType, ticketLevel, (T) key);
+        ticket.moonrise$setRemoveDelay(removeDelay);
+
+        return ticket;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index c72e23e6c793d53a216f3bdb2101c43b8a6bb389..4c3eb544c3dd40649394940b6f97c3e40d28372e 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -753,6 +753,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
         // Paper end - Configurable player collision
 
+        dev.horizonmc.horizon.util.TicketHelper.tryToLoadTickets(); // Horizon
+
         this.server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.POSTWORLD);
         this.server.spark.registerCommandBeforePlugins(this.server); // Paper - spark
         this.server.spark.enableAfterPlugins(this.server); // Paper - spark
@@ -1024,6 +1026,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     // CraftBukkit end
 
     public void stopServer() {
+        dev.horizonmc.horizon.util.TicketHelper.tryToSaveTickets(); // Horizon
         // CraftBukkit start - prevent double stopping on multiple threads
         synchronized(this.stopLock) {
             if (this.hasStopped) return;
