From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: GideonWhite1029 <gideonwhite1029@gmail.com>
Date: Mon, 25 Mar 2024 14:26:47 +0400
Subject: [PATCH] Add Logger

Powered by Leaves: https://github.com/LeavesMC/Leaves

diff --git a/src/main/java/dev/horizonmc/horizon/HorizonLogger.java b/src/main/java/dev/horizonmc/horizon/HorizonLogger.java
new file mode 100644
index 0000000000000000000000000000000000000000..c3d002305a973c59a2649c5736706dfec978eca2
--- /dev/null
+++ b/src/main/java/dev/horizonmc/horizon/HorizonLogger.java
@@ -0,0 +1,25 @@
+package dev.horizonmc.horizon;
+
+import org.bukkit.Bukkit;
+
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class HorizonLogger extends Logger {
+    public static final HorizonLogger LOGGER = new HorizonLogger();
+
+    private HorizonLogger() {
+        super("Horizon", null);
+        setParent(Bukkit.getLogger());
+        setLevel(Level.ALL);
+    }
+
+    public void severe(String msg, Exception exception) {
+        this.severe(msg + ", " + exception.getCause() + ": " + exception.getMessage());
+    }
+
+    public void warning(String msg, Exception exception) {
+        this.warning(msg + ", " + exception.getCause() + ": " + exception.getMessage());
+    }
+
+}
diff --git a/src/main/java/dev/horizonmc/horizon/util/AsyncExecutor.java b/src/main/java/dev/horizonmc/horizon/util/AsyncExecutor.java
new file mode 100644
index 0000000000000000000000000000000000000000..d58c006776340ec816d7b1c01b728bf06e5e03c6
--- /dev/null
+++ b/src/main/java/dev/horizonmc/horizon/util/AsyncExecutor.java
@@ -0,0 +1,74 @@
+package dev.horizonmc.horizon.util;
+
+import com.google.common.collect.Queues;
+import dev.horizonmc.horizon.HorizonLogger;
+
+import java.util.Queue;
+import java.util.concurrent.locks.Condition;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReentrantLock;
+import java.util.logging.Level;
+
+public class AsyncExecutor implements Runnable {
+
+    private final Queue<Runnable> jobs = Queues.newArrayDeque();
+    private final Lock mutex = new ReentrantLock();
+    private final Condition cond = mutex.newCondition();
+    private final Thread thread;
+    private volatile boolean killswitch = false;
+
+    public AsyncExecutor(String threadName) {
+        this.thread = new Thread(this, threadName);
+    }
+
+    public void start() {
+        thread.start();
+    }
+
+    public void kill() {
+        killswitch = true;
+        cond.signalAll();
+    }
+
+    public void submit(Runnable runnable) {
+        mutex.lock();
+        try {
+            jobs.offer(runnable);
+            cond.signalAll();
+        } finally {
+            mutex.unlock();
+        }
+    }
+
+    @Override
+    public void run() {
+        while (!killswitch) {
+            try {
+                Runnable runnable = takeRunnable();
+                if (runnable != null) {
+                    runnable.run();
+                }
+            } catch (InterruptedException e) {
+                Thread.currentThread().interrupt();
+            } catch (Exception e) {
+                HorizonLogger.LOGGER.log(Level.SEVERE, e, () -> "Failed to execute async job for thread " + thread.getName());
+            }
+        }
+    }
+
+    private Runnable takeRunnable() throws InterruptedException {
+        mutex.lock();
+        try {
+            while (jobs.isEmpty() && !killswitch) {
+                cond.await();
+            }
+
+            if (jobs.isEmpty()) return null; // We've set killswitch
+
+            return jobs.remove();
+        } finally {
+            mutex.unlock();
+        }
+    }
+
+}
diff --git a/src/main/java/dev/horizonmc/horizon/util/IterableWrapper.java b/src/main/java/dev/horizonmc/horizon/util/IterableWrapper.java
new file mode 100644
index 0000000000000000000000000000000000000000..79eb3db43ba13594ffd112470dfc81f134600f94
--- /dev/null
+++ b/src/main/java/dev/horizonmc/horizon/util/IterableWrapper.java
@@ -0,0 +1,21 @@
+package dev.horizonmc.horizon.util;
+
+import java.util.Iterator;
+
+import org.jetbrains.annotations.NotNull;
+
+public class IterableWrapper<T> implements Iterable<T> {
+
+    private final Iterator<T> iterator;
+
+    public IterableWrapper(Iterator<T> iterator) {
+        this.iterator = iterator;
+    }
+
+    @NotNull
+    @Override
+    public Iterator<T> iterator() {
+        return iterator;
+    }
+
+}
diff --git a/src/main/java/dev/horizonmc/horizon/util/Long2ObjectOpenHashMapWrapper.java b/src/main/java/dev/horizonmc/horizon/util/Long2ObjectOpenHashMapWrapper.java
new file mode 100644
index 0000000000000000000000000000000000000000..460a3421dc7fa7ac786c43cf0edf1f85709d4811
--- /dev/null
+++ b/src/main/java/dev/horizonmc/horizon/util/Long2ObjectOpenHashMapWrapper.java
@@ -0,0 +1,42 @@
+package dev.horizonmc.horizon.util;
+
+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
+
+import java.util.Map;
+
+import org.jetbrains.annotations.Nullable;
+
+public class Long2ObjectOpenHashMapWrapper<V> extends Long2ObjectOpenHashMap<V> {
+
+    private final Map<Long, V> backingMap;
+
+    public Long2ObjectOpenHashMapWrapper(Map<Long, V> map) {
+        backingMap = map;
+    }
+
+    @Override
+    public V put(Long key, V value) {
+        return backingMap.put(key, value);
+    }
+
+    @Override
+    public V get(Object key) {
+        return backingMap.get(key);
+    }
+
+    @Override
+    public V remove(Object key) {
+        return backingMap.remove(key);
+    }
+
+    @Nullable
+    @Override
+    public V putIfAbsent(Long key, V value) {
+        return backingMap.putIfAbsent(key, value);
+    }
+
+    @Override
+    public int size() {
+        return backingMap.size();
+    }
+}
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index d447ee01c202a6aa24162033781147061eb2a057..76c5d3f0e7dd155976b56333ff9712d5a618c18d 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -430,6 +430,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     private UUID originWorld;
     public boolean freezeLocked = false; // Paper - Freeze Tick Lock API
     public boolean fixedPose = false; // Paper - Expand Pose API
+    private CompoundTag horizonData = new CompoundTag(); // Horizon - Horizon ex data
     public @Nullable Boolean immuneToFire = null; // Purpur - Fire immune API
 
     public void setOrigin(@javax.annotation.Nonnull Location location) {
@@ -2585,6 +2586,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
                 nbttagcompound.putBoolean("Purpur.FireImmune", immuneToFire);
             }
             // Purpur end
+            nbttagcompound.put("Horizon.Data", horizonData); // Horizon - Horizon ex data
             return nbttagcompound;
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.forThrowable(throwable, "Saving entity NBT");
@@ -2737,6 +2739,11 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
                 immuneToFire = nbt.getBoolean("Purpur.FireImmune");
             }
             // Purpur end
+            // Horizon start
+            if (nbt.contains("Horizon.Data")) {
+                horizonData = nbt.getCompound("Horizon.Data");
+            }
+            // Horizon end
 
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.forThrowable(throwable, "Loading entity NBT");
@@ -5061,6 +5068,13 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         return ((net.minecraft.server.level.ServerChunkCache) level.getChunkSource()).isPositionTicking(this);
     }
     // Paper end - Expose entity id counter
+
+    // Horizon start - horizon ex data
+    public CompoundTag getHorizonData() {
+        return horizonData;
+    }
+    // Horizon end - horizon ex data
+
     // Purpur start
     @Nullable
     private Player rider = null;
