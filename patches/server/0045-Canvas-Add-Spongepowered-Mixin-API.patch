From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: GideonWhite1029 <gideonwhite1029@gmail.com>
Date: Sun, 3 Nov 2024 15:39:10 +0300
Subject: [PATCH] Canvas: Add Spongepowered Mixin API

Powered by Canvas: https://github.com/CraftCanvasMC/Canvas

diff --git a/src/main/java/dev/horizonmc/horizon/MixinPluginHook.java b/src/main/java/dev/horizonmc/horizon/MixinPluginHook.java
new file mode 100644
index 0000000000000000000000000000000000000000..300ce292eaf19346c76f4c7282d4288abf434e29
--- /dev/null
+++ b/src/main/java/dev/horizonmc/horizon/MixinPluginHook.java
@@ -0,0 +1,20 @@
+package dev.horizonmc.horizon;
+
+public class MixinPluginHook {
+
+    public static void preLoadHook(String[] args) {
+        // Preload for MixinPlugin instance registry
+    }
+
+    public static void preWorldLoadHook(String[] args) {
+        // PreWorldLoad for MixinPlugin instance registry
+    }
+
+    public static void postWorldLoadHook(String[] args) {
+        // PostWorldLoad for MixinPlugin instance registry
+    }
+
+    public static void pluginDisableHook(String[] args) {
+        // Plugin disable hook for MixinPlugin instance registry
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/entrypoint/strategy/modern/ModernPluginLoadingStrategy.java b/src/main/java/io/papermc/paper/plugin/entrypoint/strategy/modern/ModernPluginLoadingStrategy.java
index 9af388a8e56806ab44f8c3ef4f97086ce38ef3b4..99fca94ce4c1132e0ceb450d3d929ca9857d47b7 100644
--- a/src/main/java/io/papermc/paper/plugin/entrypoint/strategy/modern/ModernPluginLoadingStrategy.java
+++ b/src/main/java/io/papermc/paper/plugin/entrypoint/strategy/modern/ModernPluginLoadingStrategy.java
@@ -114,8 +114,17 @@ public class ModernPluginLoadingStrategy<T> implements ProviderLoadingStrategy<T
 
                 if (this.configuration.preloadProvider(retrievedProvider)) {
                     T instance = retrievedProvider.createInstance();
-                    if (this.configuration.load(retrievedProvider, instance)) {
-                        loadedPlugins.add(new ProviderPair<>(retrievedProvider, instance));
+                    if(instance != null){ // Canvas
+                        if (this.configuration.load(retrievedProvider, instance)) {
+                            loadedPlugins.add(new ProviderPair<>(retrievedProvider, instance));
+                        }
+                        // Horizon start
+                    }else{
+                        // MixinPlugin instance. We arent loading it the Paper way
+                        String name = this.getClass().getName();
+                        java.util.logging.Logger.getLogger("HorizonPluginLoader").log(java.util.logging.Level.WARNING, "MixinPlugin was found by Horizon by the name of [%name%].".replace("%name%", retrievedProvider.file().getName()));
+                        java.util.logging.Logger.getLogger("HorizonPluginLoader").log(java.util.logging.Level.WARNING, "Plugin startup for MixinPlugins are different than normal, see the PluginTemplate wiki for more info");
+                        // Horizon end
                     }
                 }
             } catch (Throwable ex) {
diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
index 3e82ea07ca4194844c5528446e2c4a46ff4acee5..81e163c025ac1d1a49141ad0b389561659c3ffec 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
@@ -3,6 +3,7 @@ package io.papermc.paper.plugin.manager;
 import com.google.common.base.Preconditions;
 import com.google.common.graph.GraphBuilder;
 import com.google.common.graph.MutableGraph;
+import dev.horizonmc.horizon.MixinPluginHook;
 import io.papermc.paper.plugin.configuration.PluginMeta;
 import io.papermc.paper.plugin.entrypoint.Entrypoint;
 import io.papermc.paper.plugin.entrypoint.dependency.MetaDependencyTree;
@@ -86,6 +87,7 @@ class PaperPluginInstanceManager {
     }
 
     public void loadPlugin(Plugin provided) {
+        if(provided.getClass().getClassLoader().getClass().getName().toString().equalsIgnoreCase("space.vectrix.ignite.launch.ember.EmberClassLoader")) return; // Horizon
         PluginMeta configuration = provided.getPluginMeta();
 
         this.plugins.add(provided);
@@ -156,6 +158,7 @@ class PaperPluginInstanceManager {
     // Plugins are disabled in order like this inorder to "rougly" prevent
     // their dependencies unloading first. But, eh.
     public void disablePlugins() {
+        MixinPluginHook.pluginDisableHook(org.bukkit.craftbukkit.CraftServer.startupArgs);
         Plugin[] plugins = this.getPlugins();
         for (int i = plugins.length - 1; i >= 0; i--) {
             this.disablePlugin(plugins[i]);
diff --git a/src/main/java/io/papermc/paper/plugin/provider/type/paper/PaperPluginParent.java b/src/main/java/io/papermc/paper/plugin/provider/type/paper/PaperPluginParent.java
index 55a6898e95704cddafda1ca5dc0951c7102fe10b..e8d07abaf4a34f6c89e4b543aff2811081fdaf89 100644
--- a/src/main/java/io/papermc/paper/plugin/provider/type/paper/PaperPluginParent.java
+++ b/src/main/java/io/papermc/paper/plugin/provider/type/paper/PaperPluginParent.java
@@ -176,6 +176,11 @@ public class PaperPluginParent {
                 }
 
                 this.status = ProviderStatus.INITIALIZED;
+                // Horizon start
+                if(plugin.getClass().getClassLoader().getClass().getName().toString().equalsIgnoreCase("space.vectrix.ignite.launch.ember.EmberClassLoader")){
+                    return null;
+                }
+                // Horizon end
                 return plugin;
             } catch (Throwable throwable) {
                 this.status = ProviderStatus.ERRORED;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 7bf0a6288bfa3bea10ec33e7bdf0010c1c9976b8..d52cbec9365e64c5c06774bca0906b2e55abda82 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -14,6 +14,7 @@ import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.serialization.Dynamic;
 import com.mojang.serialization.Lifecycle;
 import dev.horizonmc.horizon.HorizonConfig;
+import dev.horizonmc.horizon.MixinPluginHook;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import java.awt.image.BufferedImage;
 import java.io.ByteArrayOutputStream;
@@ -269,6 +270,7 @@ import javax.annotation.Nonnull; // Paper
 public final class CraftServer implements Server {
     private final String serverName = "Horizon"; // Paper // Pufferfish // Purpur // Horizon
     private final String serverVersion;
+    public static String[] startupArgs = null; // Horizon
     private final String bukkitVersion = Versioning.getBukkitVersion();
     private final Logger logger = Logger.getLogger("Minecraft");
     private final ServicesManager servicesManager = new SimpleServicesManager();
@@ -609,6 +611,14 @@ public final class CraftServer implements Server {
             }
         }
 
+        // Horizon start
+        if(type == PluginLoadOrder.POSTWORLD){
+            MixinPluginHook.postWorldLoadHook(org.bukkit.craftbukkit.CraftServer.startupArgs);
+        }else if(type == PluginLoadOrder.STARTUP){
+            MixinPluginHook.preWorldLoadHook(org.bukkit.craftbukkit.CraftServer.startupArgs);
+        }
+        // Horizon end
+
         if (type == PluginLoadOrder.POSTWORLD) {
             // Spigot start - Allow vanilla commands to be forced to be the main command
             this.setVanillaCommands(true);
@@ -787,6 +797,13 @@ public final class CraftServer implements Server {
         return this.getServer().getPort();
     }
 
+    // Horizon start
+    @Override
+    public String[] getStartupArgs(){
+        return CraftServer.startupArgs != null ? CraftServer.startupArgs : new String[0];
+    }
+    // Horizon end
+
     @Override
     public int getViewDistance() {
         return this.getProperties().viewDistance;
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index f6b1e776fea1004969c6cf78704822dadc647332..6ac71d194fd205898aa80b4b62656d3d65c4c7e9 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -10,6 +10,8 @@ import java.util.List;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+
+import dev.horizonmc.horizon.MixinPluginHook;
 import joptsimple.OptionParser;
 import joptsimple.OptionSet;
 import joptsimple.util.PathConverter;
@@ -26,6 +28,7 @@ public class Main {
     // Paper end - Reset loggers after shutdown
 
     public static void main(String[] args) {
+        MixinPluginHook.preLoadHook(args); // Horizon - MixinPlugin injection point
         // Paper start
         final String warnWhenLegacyFormattingDetected = String.join(".", "net", "kyori", "adventure", "text", "warnWhenLegacyFormattingDetected");
         if (false && System.getProperty(warnWhenLegacyFormattingDetected) == null) {
@@ -303,6 +306,7 @@ public class Main {
                 t.printStackTrace();
             }
         }
+        CraftServer.startupArgs = args; // Horizon - Expose Launch Args
     }
 
     private static List<String> asList(String... params) {
