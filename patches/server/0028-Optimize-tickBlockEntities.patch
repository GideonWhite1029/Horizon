From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: GideonWhite1029 <gideonwhite1029@gmail.com>
Date: Wed, 10 Jul 2024 17:42:56 +0400
Subject: [PATCH] Optimize tickBlockEntities


diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index fe64e03cc3b52a693a8c4aa79d707e962eb3d3d1..86eb3458532db6aeb62b32d9c48f447ab1ca4b89 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -1436,6 +1436,10 @@ public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedl
         int tickedEntities = 0; // Paper - rewrite chunk system
 
         int tilesThisCycle = 0;
+        // Horizon start - optimize tickBlockEntities
+        int shouldTickBlocksAtLastResult = -1; // -1 = undefined
+        long shouldTickBlocksAtChunkPos = 0L;
+        // Horizon end
         var toRemove = new it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet<TickingBlockEntity>(); // Paper - Fix MC-117075; use removeAll
         toRemove.add(null); // Paper - Fix MC-117075
         for (tileTickPosition = 0; tileTickPosition < this.blockEntityTickers.size(); tileTickPosition++) { // Paper - Disable tick limiters
@@ -1448,8 +1452,20 @@ public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedl
                 tilesThisCycle--;
                 toRemove.add(tickingblockentity); // Paper - Fix MC-117075; use removeAll
                 // Spigot end
-            } else if (flag && this.shouldTickBlocksAt(tickingblockentity.getPos())) {
-                tickingblockentity.tick();
+                // Horizon start - optimize tickBlockEntities
+            } else if (flag) {
+                long chunkPos = tickingblockentity.getChunkCoordinateKey();
+                boolean shouldTick;
+                if (shouldTickBlocksAtChunkPos == chunkPos && shouldTickBlocksAtLastResult != -1) {
+                    shouldTick = shouldTickBlocksAtLastResult == 1;
+                } else {
+                    shouldTick = this.shouldTickBlocksAt(chunkPos);
+                    shouldTickBlocksAtLastResult = shouldTick ? 1 : 0;
+                    shouldTickBlocksAtChunkPos = chunkPos;
+                }
+                if (shouldTick) {
+                    tickingblockentity.tick();
+                } // Horizon end
                 // Paper start - rewrite chunk system
                 if ((++tickedEntities & 7) == 0) {
                     ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemLevel)(Level)(Object)this).moonrise$midTickTasks();
diff --git a/src/main/java/net/minecraft/world/level/block/entity/TickingBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/TickingBlockEntity.java
index 28e3b73507b988f7234cbf29c4024c88180d0aef..10294b8764c5c96fe2dd9e5611119e9548d7b1c3 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/TickingBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/TickingBlockEntity.java
@@ -10,4 +10,6 @@ public interface TickingBlockEntity {
     BlockPos getPos();
 
     String getType();
+
+    long getChunkCoordinateKey(); // Horizon - optimize tickBlockEntities
 }
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 4666b51278dbe65b8e4911bcf1dbb867110c146f..22e4c5930234753990269d1f4d596200c66f1bb7 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -74,6 +74,12 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
         public String getType() {
             return "<null>";
         }
+        // Horizon start - optimize tickBlockEntities
+        @Override
+        public long getChunkCoordinateKey() {
+            return 0;
+        }
+        // Horizon end
     };
     private final Map<BlockPos, LevelChunk.RebindableTickingBlockEntityWrapper> tickersInLevel;
     public boolean loaded;
@@ -952,7 +958,7 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
     }
 
     private <T extends BlockEntity> TickingBlockEntity createTicker(T blockEntity, BlockEntityTicker<T> blockEntityTicker) {
-        return new LevelChunk.BoundTickingBlockEntity<>(blockEntity, blockEntityTicker);
+        return new LevelChunk.BoundTickingBlockEntity<>(blockEntity, blockEntityTicker, this.coordinateKey); // Horizon - optimize tickBlockEntities
     }
 
     @FunctionalInterface
@@ -1003,6 +1009,13 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
         public String toString() {
             return String.valueOf(this.ticker) + " <wrapped>";
         }
+
+        // Horizon start - optimize tickBlockEntities
+        @Override
+        public long getChunkCoordinateKey() {
+            return this.ticker.getChunkCoordinateKey();
+        }
+        // Horizon end
     }
 
     private class BoundTickingBlockEntity<T extends BlockEntity> implements TickingBlockEntity {
@@ -1010,10 +1023,12 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
         private final T blockEntity;
         private final BlockEntityTicker<T> ticker;
         private boolean loggedInvalidBlockState;
+        private final long chunkCoordinateKey; // Horizon - optimize tickBlockEntities
 
-        BoundTickingBlockEntity(final BlockEntity tileentity, final BlockEntityTicker blockentityticker) {
+        BoundTickingBlockEntity(final BlockEntity tileentity, final BlockEntityTicker blockentityticker, long chunkCoordinateKey) { // Horizon - optimize tickBlockEntities
             this.blockEntity = (T) tileentity; // CraftBukkit - decompile error
             this.ticker = blockentityticker;
+            this.chunkCoordinateKey = chunkCoordinateKey; // Horizon - optimize tickBlockEntities
         }
 
         @Override
@@ -1081,5 +1096,11 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
 
             return "Level ticker for " + s + "@" + String.valueOf(this.getPos());
         }
+        // Horizon start - optimize tickBlockEntities
+        @Override
+        public long getChunkCoordinateKey() {
+            return this.chunkCoordinateKey;
+        }
+        // Horizon end
     }
 }
